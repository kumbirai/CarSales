/**
 * za.co.kumbirai.carsales.gui.detail<br>
 * 
 * <p><b>Title:</b> CarDetailView<br>
 * <b>Description:</b> <br>
 * <b>Copyright:</b> Copyright (c) 2012<br>
 * <b>Company:</b> SSP</p>
 * @author Kumbirai 'Coach' Mundangepfupfu
 * @date 24 Dec 2012 11:52:25 AM
 */
package za.co.kumbirai.carsales.gui.detail;

import java.math.BigDecimal;
import java.util.StringTokenizer;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import javax.swing.JOptionPane;

import za.co.kumbirai.carsales.entities.Car;

/**
 * <p><b>Purpose:</b><br>
 * <br>
 *
 * Copyright Notice<br>
 * ================<br>
 * This file contains proprietary information.
 * Copying or reproduction without prior written approval is prohibited.<br>
 * Copyright (c) 2012<br>
 * 
 * <p><b>Title:</b> CarDetailView<br>
 * <b>Description:</b> </p>
 *
 * @author Kumbirai 'Coach' Mundangepfupfu<br>
 * @date 24 Dec 2012 11:52:25 AM<br>
 * @version 1.0<br>
 *
 * <b>Revision:</b>
 *					
 */
public class CarDetailView extends GridPane {
	private CarDetailPresenter presenter;
	private Long carId;
	private TextField manufacturerField;
	private TextField modelField;
	private TextField carYearField;
	private TextField priceField;
	private TextField kilometersField;
	private TextField informationField;

	/**
	 * 
	 */
	public CarDetailView() {
		buildView();
	}

	/**
	 * @author Kumbirai 'Coach' Mundangepfupfu - 24 Dec 2012
	 * 
	 * getCar
	 * 
	 * @return
	 */
	public Car getCar() {
		Car car = new Car(manufacturerField.getText(), modelField.getText(), informationField.getText());

		car.setId(carId);
		//car.setModel(modelField.getText());
		car.setCarYear(new Integer(carYearField.getText()));
		car.setPrice(new BigDecimal(priceField.getText()));
		car.setKilometers(new Double(kilometersField.getText()));
		//car.setInformation(informationField.getText());

		return car;
	}

	/**
	 * @author Kumbirai 'Coach' Mundangepfupfu - 24 Dec 2012
	 * 
	 * setCar
	 * 
	 * @param car
	 */
	public void setCar(Car car) {
		System.out.printf("CarDetailView#setCar(Car car) called with car = %s\n", car);
		if (car != null) {
			carId = car.getId();
			manufacturerField.setText(car.getManufacturer().getManufacturer());
			modelField.setText(car.getModel());
			carYearField.setText(car.getCarYear().toString());
			priceField.setText(car.getPrice().toString());
			kilometersField.setText(car.getKilometers().toString());
			informationField.setText(car.getInformation());
		} else {
			carId = null;
			manufacturerField.setText("");
			modelField.setText("");
			carYearField.setText("");
			priceField.setText("");
			kilometersField.setText("");
			informationField.setText("");
		}
	}

	/** Setter for the <code>presenter</code> attribute.
	 * @param CarDetailPresenter presenter
	 */
	public void setPresenter(CarDetailPresenter presenter) {
		this.presenter = presenter;
	}

	/**
	 * @author Kumbirai 'Coach' Mundangepfupfu - 24 Dec 2012
	 * 
	 * buildView
	 * 
	 */
	protected void buildView() {
		setHgap(15);
		setVgap(10);
		int row = 0;

		add(new Label("Manufacturer"), 0, row);
		manufacturerField = new TextField();
		manufacturerField.setPrefColumnCount(20);
		add(manufacturerField, 1, row);

		row++;

		add(new Label("Model"), 0, row);
		modelField = new TextField();
		modelField.setPrefColumnCount(20);
		add(modelField, 1, row);

		row++;

		add(new Label("Year"), 0, row);
		carYearField = new TextField();
		carYearField.setPrefColumnCount(20);
		add(carYearField, 1, row);

		row++;

		add(new Label("Milage"), 0, row);
		kilometersField = new TextField();
		kilometersField.setPrefColumnCount(20);
		add(kilometersField, 1, row);

		row++;

		add(new Label("Price"), 0, row);
		priceField = new TextField();
		priceField.setPrefColumnCount(20);
		add(priceField, 1, row);

		row++;

		add(new Label("Information"), 0, row);
		informationField = new TextField();
		informationField.setPrefColumnCount(20);
		add(informationField, 1, row);

		row++;

		HBox buttonBar = new HBox(10);

		Button saveButton = new Button("Save");
		saveButton.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				//presenter.save();
				saveButtonClicked();
			}
		});
		buttonBar.getChildren().add(saveButton);

		Button deleteButton = new Button("Delete");
		deleteButton.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				presenter.delete();
			}
		});
		buttonBar.getChildren().add(deleteButton);

		Button cancelButton = new Button("Cancel");
		cancelButton.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				presenter.cancel();
			}
		});
		buttonBar.getChildren().add(cancelButton);

		add(buttonBar, 0, row, 1, 2);
	}

	private void saveButtonClicked() {
		String manufacturer = "";
		String model = "";
		String info = "";
		Double kilometers = 0d;
		BigDecimal price = new BigDecimal(0);
		Integer year = 0;

		boolean valid = false;

		private TextField manufacturerField;
		private TextField modelField;
		private TextField carYearField;
		private TextField priceField;
		private TextField kilometersField;
		private TextField informationField;

		try {
			/*
			 * retrieve all the values from the text field, and convert them
			 * into an appropriate format
			 */
			manufacturer = manufacturerField.getText().trim();
			model = modelField.getText().trim();
			info = informationField.getText().trim();
			kilometers = Double.parseDouble(kilometersField.getText().trim());
			price = Integer.parseInt(priceField.getText().trim());
			year = Integer.parseInt(carYearField.getText().trim());

			// begin validation process
			if (year >= 1000 && year <= 9999) {
				if (validateKilometers(carComponents.getKmText().trim())) {
					valid = true;
				} else
					JOptionPane
							.showMessageDialog(
									carSystem,
									"An error has occured due to incorrect \"Km Traveled\" text field data.\nThis text field must contain a number with one decimal place only.",
									"Invalid field", JOptionPane.ERROR_MESSAGE);
			} else
				JOptionPane.showMessageDialog(carSystem,
						"An error has occured due to incorrect \"Year\" text field data.\nThis text field must be in the form, YYYY. ie, 2007.",
						"Invalid field", JOptionPane.ERROR_MESSAGE);

		}
		/*
		 * NumberFormatException would usually be thrown if the text fields
		 * contain invalid data, for example a price field containing letters.
		 */
		catch (NumberFormatException exp) {
			JOptionPane
					.showMessageDialog(
							carSystem,
							"An unknown error has occured. Please ensure your fields meet the following requirements:\n"
									+ "The \"Year\" field must contain four numeric digits only\nThe \"Price\" field must contain a valid integer with no decimal places\nThe \"Km Traveled\" field must contain a number which can have a maximum of one decimal place",
							"Invalid field", JOptionPane.ERROR_MESSAGE);
		}

		if (valid) {
			// create a car object from validated data.
			Car myCar = new Car(manufacturer, model, info);
			myCar.setKilometers(kilometers);
			myCar.setPrice(new BigDecimal(price));
			myCar.setCarYear(year);

			// attempt to add the new car to the system.
			int result = carSystem.addNewCar(myCar);

			// if the car was added successfully
			if (result == CarsCollection.NO_ERROR) {
				carSystem.setCarsUpdated();
				JOptionPane.showMessageDialog(carSystem, "Record added.", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
				resetButtonClicked();
				carComponents.setFocusManufacturerTextField();
			}
			// for that manufacturer, the limit has been reached
			else if (result == CarsCollection.CARS_MAXIMUM_REACHED)
				JOptionPane
						.showMessageDialog(
								carSystem,
								"The maximum amount of cars for that manufacturer has been reached.\nUnfortunately you cannot add any further cars to this manufacturer",
								"Problem adding car", JOptionPane.WARNING_MESSAGE);
			// the car system has reached the maximum number of manufacturers
			// allowed
			else if (result == CarsCollection.MANUFACTURERS_MAXIMUM_REACHED)
				JOptionPane
						.showMessageDialog(
								carSystem,
								"The maximum amount of manufacturers in the car system has been reached.\nUnfortunately you cannot add any further manufacturers to this system",
								"Problem adding car", JOptionPane.WARNING_MESSAGE);
		}
	}

	/**
	 * @author Kumbirai 'Coach' Mundangepfupfu - 28 Dec 2012
	 * 
	 * validateKilometers
	 * 
	 * @param distance
	 * @return
	 */
	private boolean validateKilometers(String distance) {
		boolean valid = false;
		String rem;
		StringTokenizer tokens = new StringTokenizer(distance, "."); // look for
																		// decimal
																		// point

		tokens.nextToken();

		if (tokens.hasMoreTokens()) // if true, there is a decimal point present
		{
			// get string representation of all numbers after the decimal point
			rem = tokens.nextToken();
			// if there's only one number after the decimal point, then it's
			// valid
			if (rem.length() == 1)
				valid = true;
			else {
				// check if the user has typed something like 3.00, or even
				// 3.00000
				if ((Integer.parseInt(rem)) % (Math.pow(10, rem.length() - 1)) == 0)
					valid = true;
				else
					valid = false;
			}
		} else
			// doesn't have a decimal place
			valid = true;

		return valid;
	}
}